{"version":3,"sources":["App.jsx","index.js"],"names":["sdk","ThirdwebSDK","tokenModule","getTokenModule","bundleDropModule","getBundleDropModule","voteModule","getVoteModule","App","useWeb3","connectWallet","address","error","provider","console","log","signer","getSigner","undefined","useState","hasClaimedNFT","setHasClaimedNFT","memberTokenAmounts","setMemberTokenAmounts","memberAddresses","setMemberAddresses","proposals","setProposals","isVoting","setIsVoting","hasVoted","setHasVoted","useEffect","getAllClaimerAddresses","then","addresses","catch","err","getAllHolderBalances","amounts","memberList","useMemo","map","tokenAmount","ethers","utils","formatUnits","isClaiming","setIsClaiming","setProviderOrSigner","getAll","length","proposalId","balanceOf","balance","gt","UnsupportedChainIdError","className","member","str","substring","onSubmit","e","a","preventDefault","stopPropagation","votes","proposal","voteResult","vote","forEach","document","getElementById","type","checked","getDelegationOf","constants","AddressZero","delegateTo","Promise","all","get","state","execute","index","description","id","name","value","defaultChecked","htmlFor","label","disabled","onClick","claim","finally","ReactDOM","render","StrictMode","connectors","injected","supportedChainIds"],"mappings":"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","file":"static/js/main.47ea893a.chunk.js","sourcesContent":["import { useEffect, useMemo, useState } from \"react\";\r\nimport { UnsupportedChainIdError } from \"@web3-react/core\";\r\nimport { useWeb3 } from \"@3rdweb/hooks\";\r\nimport { ThirdwebSDK } from \"@3rdweb/sdk\";\r\nimport { ethers } from \"ethers\";\r\n\r\nconst sdk = new ThirdwebSDK(\"rinkeby\");\r\nconst tokenModule = sdk.getTokenModule(\r\n  \"0x9c01f14Ac45bbD9B96CBA1683398285a6A00c2E7\"\r\n);\r\n\r\nconst bundleDropModule = sdk.getBundleDropModule(\r\n  \"0xCaC5159f719F810B28A09126FC182CFD3304B37D\",\r\n);\r\nconst voteModule = sdk.getVoteModule(\r\n  \"0xE0fee739C6e1B6797936e7DBbC269e020857ea4c\",\r\n);\r\n\r\n\r\n\r\nconst App = () => {\r\n  const { connectWallet, address, error, provider } = useWeb3();\r\n  console.log(\"👋 Address:\", address)\r\n\r\n  // The signer is required to sign transactions on the blockchain.\r\n  // Without it we can only read data, not write.\r\n  const signer = provider ? provider.getSigner() : undefined;\r\n\r\n  const [hasClaimedNFT, setHasClaimedNFT] = useState(false);\r\n  // isClaiming lets us easily keep a loading state while the NFT is minting.\r\n  // Holds the amount of token each member has in state.\r\nconst [memberTokenAmounts, setMemberTokenAmounts] = useState({});\r\n// The array holding all of our members addresses.\r\nconst [memberAddresses, setMemberAddresses] = useState([]);\r\n\r\n// A fancy function to shorten someones wallet address, no need to show the whole thing. \r\nconst shortenAddress = (str) => {\r\n  return str.substring(0, 6) + \"...\" + str.substring(str.length - 4);\r\n\r\n};\r\nconst [proposals, setProposals] = useState([]);\r\nconst [isVoting, setIsVoting] = useState(false);\r\nconst [hasVoted, setHasVoted] = useState(false);\r\n// This useEffect grabs all the addresses of our members holding our NFT.\r\nuseEffect(() => {\r\n  if (!hasClaimedNFT) {\r\n    return;\r\n  }\r\n  \r\n  // Just like we did in the 7-airdrop-token.js file! Grab the users who hold our NFT\r\n  // with tokenId 0.\r\n  bundleDropModule\r\n    .getAllClaimerAddresses(\"0\")\r\n    .then((addresses) => {\r\n      console.log(\"🚀 Members addresses\", addresses)\r\n      setMemberAddresses(addresses);\r\n    })\r\n    .catch((err) => {\r\n      console.error(\"failed to get member list\", err);\r\n    });\r\n}, [hasClaimedNFT]);\r\n\r\n// This useEffect grabs the # of token each member holds.\r\nuseEffect(() => {\r\n  if (!hasClaimedNFT) {\r\n    return;\r\n  }\r\n\r\n  // Grab all the balances.\r\n  tokenModule\r\n    .getAllHolderBalances()\r\n    .then((amounts) => {\r\n      console.log(\"👜 Amounts\", amounts)\r\n      setMemberTokenAmounts(amounts);\r\n    })\r\n    .catch((err) => {\r\n      console.error(\"failed to get token amounts\", err);\r\n    });\r\n}, [hasClaimedNFT]);\r\n\r\n// Now, we combine the memberAddresses and memberTokenAmounts into a single array\r\nconst memberList = useMemo(() => {\r\n  return memberAddresses.map((address) => {\r\n    return {\r\n      address,\r\n      tokenAmount: ethers.utils.formatUnits(\r\n        // If the address isn't in memberTokenAmounts, it means they don't\r\n        // hold any of our token.\r\n        memberTokenAmounts[address] || 0,\r\n        18,\r\n      ),\r\n    };\r\n  });\r\n}, [memberAddresses, memberTokenAmounts]);\r\n  const [isClaiming, setIsClaiming] = useState(false);\r\n\r\n  // Another useEffect!\r\n  useEffect(() => {\r\n    // We pass the signer to the sdk, which enables us to interact with\r\n    // our deployed contract!\r\n    sdk.setProviderOrSigner(signer);\r\n  }, [signer]);\r\n\r\n\r\n  useEffect(() => {\r\n    if (!hasClaimedNFT) {\r\n      return;\r\n    }\r\n    // A simple call to voteModule.getAll() to grab the proposals.\r\n    voteModule\r\n      .getAll()\r\n      .then((proposals) => {\r\n        // Set state!\r\n        setProposals(proposals);\r\n        console.log(\"🌈 Proposals:\", proposals)\r\n      })\r\n      .catch((err) => {\r\n        console.error(\"failed to get proposals\", err);\r\n      });\r\n  }, [hasClaimedNFT]);\r\n  \r\n  // We also need to check if the user already voted.\r\n  useEffect(() => {\r\n    if (!hasClaimedNFT) {\r\n      return;\r\n    }\r\n  \r\n    // If we haven't finished retrieving the proposals from the useEffect above\r\n    // then we can't check if the user voted yet!\r\n    if (!proposals.length) {\r\n      return;\r\n    }\r\n  \r\n    // Check if the user has already voted on the first proposal.\r\n    voteModule\r\n      .hasVoted(proposals[0].proposalId, address)\r\n      .then((hasVoted) => {\r\n        setHasVoted(hasVoted);\r\n        if (hasVoted) {\r\n          console.log(\"🥵 User has already voted\");\r\n        } else {\r\n          console.log(\"🙂 User has not voted yet\");\r\n        }\r\n      })\r\n      .catch((err) => {\r\n        console.error(\"failed to check if wallet has voted\", err);\r\n      });\r\n  }, [hasClaimedNFT, proposals, address]);\r\n\r\n  useEffect(() => {\r\n    if (!address) {\r\n      return;\r\n    }\r\n    return bundleDropModule\r\n      .balanceOf(address, \"0\")\r\n      .then((balance) => {\r\n        if (balance.gt(0)) {\r\n          setHasClaimedNFT(true);\r\n          console.log(\"🌟 this user has a membership NFT!\")\r\n        } else {\r\n          setHasClaimedNFT(false);\r\n          console.log(\"😭 this user doesn't have a membership NFT.\")\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        setHasClaimedNFT(false);\r\n        console.error(\"failed to nft balance\", error);\r\n      });\r\n  }, [address]);\r\n\r\n  if (!address) {\r\n    return (\r\n      <div className=\"landing\">\r\n        <h1>Welcome to MindsDAO</h1>\r\n        <button onClick={() => connectWallet(\"injected\")} className=\"btn-hero\">\r\n          Connect your wallet\r\n        </button>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  if (error instanceof UnsupportedChainIdError ) {\r\n    return (\r\n      <div className=\"unsupported-network\">\r\n        <h2>Please connect to Rinkeby</h2>\r\n        <p>\r\n          This dapp only works on the Rinkeby network, please switch networks\r\n          in your connected wallet.\r\n        </p>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  if (hasClaimedNFT) {\r\n    return (\r\n      <div className=\"member-page\">\r\n        <h1>MindsDAO Member Page</h1>\r\n        <p>Congratulations on being a member</p>\r\n        <div>\r\n        <div>\r\n        <h2>Member List</h2>\r\n            <table className=\"card\">\r\n              <thead>\r\n                <tr>\r\n                  <th>Address</th>\r\n                  <th>Token Amount</th>\r\n                </tr>\r\n              </thead>\r\n              <tbody>\r\n                {memberList.map((member) => {\r\n                  return (\r\n                    <tr key={member.address}>\r\n                      <td>{shortenAddress(member.address)}</td>\r\n                      <td>{member.tokenAmount}</td>\r\n                    </tr>\r\n                  );\r\n                })}\r\n              </tbody>\r\n            </table>\r\n          </div>\r\n          <div>\r\n            <h2>Active Proposals</h2>\r\n            <form\r\n              onSubmit={async (e) => {\r\n                e.preventDefault();\r\n                e.stopPropagation();\r\n\r\n                //before we do async things, we want to disable the button to prevent double clicks\r\n                setIsVoting(true);\r\n\r\n                // lets get the votes from the form for the values\r\n                const votes = proposals.map((proposal) => {\r\n                  let voteResult = {\r\n                    proposalId: proposal.proposalId,\r\n                    //abstain by default\r\n                    vote: 2,\r\n                  };\r\n                  proposal.votes.forEach((vote) => {\r\n                    const elem = document.getElementById(\r\n                      proposal.proposalId + \"-\" + vote.type\r\n                    );\r\n\r\n                    if (elem.checked) {\r\n                      voteResult.vote = vote.type;\r\n                      return;\r\n                    }\r\n                  });\r\n                  return voteResult;\r\n                });\r\n\r\n                // first we need to make sure the user delegates their token to vote\r\n                try {\r\n                  //we'll check if the wallet still needs to delegate their tokens before they can vote\r\n                  const delegation = await tokenModule.getDelegationOf(address);\r\n                  // if the delegation is the 0x0 address that means they have not delegated their governance tokens yet\r\n                  if (delegation === ethers.constants.AddressZero) {\r\n                    //if they haven't delegated their tokens yet, we'll have them delegate them before voting\r\n                    await tokenModule.delegateTo(address);\r\n                  }\r\n                  // then we need to vote on the proposals\r\n                  try {\r\n                    await Promise.all(\r\n                      votes.map(async (vote) => {\r\n                        // before voting we first need to check whether the proposal is open for voting\r\n                        // we first need to get the latest state of the proposal\r\n                        const proposal = await voteModule.get(vote.proposalId);\r\n                        // then we check if the proposal is open for voting (state === 1 means it is open)\r\n                        if (proposal.state === 1) {\r\n                          // if it is open for voting, we'll vote on it\r\n                          return voteModule.vote(vote.proposalId, vote.vote);\r\n                        }\r\n                        // if the proposal is not open for voting we just return nothing, letting us continue\r\n                        return;\r\n                      })\r\n                    );\r\n                    try {\r\n                      // if any of the propsals are ready to be executed we'll need to execute them\r\n                      // a proposal is ready to be executed if it is in state 4\r\n                      await Promise.all(\r\n                        votes.map(async (vote) => {\r\n                          // we'll first get the latest state of the proposal again, since we may have just voted before\r\n                          const proposal = await voteModule.get(\r\n                            vote.proposalId\r\n                          );\r\n\r\n                          //if the state is in state 4 (meaning that it is ready to be executed), we'll execute the proposal\r\n                          if (proposal.state === 4) {\r\n                            return voteModule.execute(vote.proposalId);\r\n                          }\r\n                        })\r\n                      );\r\n                      // if we get here that means we successfully voted, so let's set the \"hasVoted\" state to true\r\n                      setHasVoted(true);\r\n                      // and log out a success message\r\n                      console.log(\"successfully voted\");\r\n                    } catch (err) {\r\n                      console.error(\"failed to execute votes\", err);\r\n                    }\r\n                  } catch (err) {\r\n                    console.error(\"failed to vote\", err);\r\n                  }\r\n                } catch (err) {\r\n                  console.error(\"failed to delegate tokens\");\r\n                } finally {\r\n                  // in *either* case we need to set the isVoting state to false to enable the button again\r\n                  setIsVoting(false);\r\n                }\r\n              }}\r\n            >\r\n              {proposals.map((proposal, index) => (\r\n                <div key={proposal.proposalId} className=\"card\">\r\n                  <h5>{proposal.description}</h5>\r\n                  <div>\r\n                    {proposal.votes.map((vote) => (\r\n                      <div key={vote.type}>\r\n                        <input\r\n                          type=\"radio\"\r\n                          id={proposal.proposalId + \"-\" + vote.type}\r\n                          name={proposal.proposalId}\r\n                          value={vote.type}\r\n                          //default the \"abstain\" vote to chedked\r\n                          defaultChecked={vote.type === 2}\r\n                        />\r\n                        <label htmlFor={proposal.proposalId + \"-\" + vote.type}>\r\n                          {vote.label}\r\n                        </label>\r\n                      </div>\r\n                    ))}\r\n                  </div>\r\n                </div>\r\n              ))}\r\n              <button disabled={isVoting || hasVoted} type=\"submit\">\r\n                {isVoting\r\n                  ? \"Voting...\"\r\n                  : hasVoted\r\n                    ? \"You Already Voted\"\r\n                    : \"Submit Votes\"}\r\n              </button>\r\n              <small>\r\n                This will trigger multiple transactions that you will need to\r\n                sign.\r\n              </small>\r\n            </form>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  // Render mint nft screen.\r\n  return (\r\n    <div className=\"mint-nft\">\r\n      <h1>Mint your free 🍪DAO Membership NFT</h1>\r\n      <button\r\n        disabled={isClaiming}\r\n        onClick={() => {\r\n          setIsClaiming(true);\r\n          // Call bundleDropModule.claim(\"0\", 1) to mint nft to user's wallet.\r\n          bundleDropModule\r\n            .claim(\"0\", 1)\r\n            .catch((err) => {\r\n              console.error(\"failed to claim\", err);\r\n              setIsClaiming(false);\r\n            })\r\n            .finally(() => {\r\n              // Stop loading state.\r\n              setIsClaiming(false);\r\n              // Set claim state.\r\n              setHasClaimedNFT(true);\r\n              // Show user their fancy new NFT!\r\n              console.log(\r\n                `Successfully Minted! Check it our on OpenSea: https://testnets.opensea.io/assets/${bundleDropModule.address}/0`\r\n              );\r\n            });\r\n        }}\r\n      >\r\n        {isClaiming ? \"Minting...\" : \"Mint your nft (FREE)\"}\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\n\r\n// Import ThirdWeb\r\nimport { ThirdwebWeb3Provider } from '@3rdweb/hooks';\r\n\r\n// Include what chains you wanna support.\r\n// 4 = Rinkeby.\r\nconst supportedChainIds = [4];\r\n\r\n// Include what type of wallet you want to support.\r\n// In this case, we support Metamask which is an \"injected wallet\".\r\nconst connectors = {\r\n  injected: {},\r\n};\r\n\r\n// Finally, wrap App with ThirdwebWeb3Provider.\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <ThirdwebWeb3Provider\r\n      connectors={connectors}\r\n      supportedChainIds={supportedChainIds}\r\n    >\r\n      <App />\r\n    </ThirdwebWeb3Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);"],"sourceRoot":""}